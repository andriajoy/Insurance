//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InsuranceDBfirst
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InsuranceDBContext : DbContext
    {
        public InsuranceDBContext()
            : base("name=InsuranceDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Participant> Participants { get; set; }
        public virtual DbSet<ParticipantType> ParticipantTypes { get; set; }
        public virtual DbSet<Policy> Policies { get; set; }
        public virtual DbSet<PolicyType> PolicyTypes { get; set; }
    
        public virtual int USP_AddParticipants(string firstname, string lastname, string middlename, Nullable<System.DateTime> dob, Nullable<int> participanttypeno)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("middlename", middlename) :
                new ObjectParameter("middlename", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var participanttypenoParameter = participanttypeno.HasValue ?
                new ObjectParameter("participanttypeno", participanttypeno) :
                new ObjectParameter("participanttypeno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_AddParticipants", firstnameParameter, lastnameParameter, middlenameParameter, dobParameter, participanttypenoParameter);
        }
    
        public virtual int USP_AddPolicies(Nullable<int> plannumber, Nullable<int> installmentpremium, Nullable<int> insured, Nullable<int> sumassured, string policystatus, string premiummode, Nullable<System.DateTime> premiumduedate, Nullable<int> beneficiary, Nullable<int> owner, Nullable<int> policyterm)
        {
            var plannumberParameter = plannumber.HasValue ?
                new ObjectParameter("plannumber", plannumber) :
                new ObjectParameter("plannumber", typeof(int));
    
            var installmentpremiumParameter = installmentpremium.HasValue ?
                new ObjectParameter("installmentpremium", installmentpremium) :
                new ObjectParameter("installmentpremium", typeof(int));
    
            var insuredParameter = insured.HasValue ?
                new ObjectParameter("insured", insured) :
                new ObjectParameter("insured", typeof(int));
    
            var sumassuredParameter = sumassured.HasValue ?
                new ObjectParameter("sumassured", sumassured) :
                new ObjectParameter("sumassured", typeof(int));
    
            var policystatusParameter = policystatus != null ?
                new ObjectParameter("policystatus", policystatus) :
                new ObjectParameter("policystatus", typeof(string));
    
            var premiummodeParameter = premiummode != null ?
                new ObjectParameter("premiummode", premiummode) :
                new ObjectParameter("premiummode", typeof(string));
    
            var premiumduedateParameter = premiumduedate.HasValue ?
                new ObjectParameter("premiumduedate", premiumduedate) :
                new ObjectParameter("premiumduedate", typeof(System.DateTime));
    
            var beneficiaryParameter = beneficiary.HasValue ?
                new ObjectParameter("beneficiary", beneficiary) :
                new ObjectParameter("beneficiary", typeof(int));
    
            var ownerParameter = owner.HasValue ?
                new ObjectParameter("owner", owner) :
                new ObjectParameter("owner", typeof(int));
    
            var policytermParameter = policyterm.HasValue ?
                new ObjectParameter("policyterm", policyterm) :
                new ObjectParameter("policyterm", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_AddPolicies", plannumberParameter, installmentpremiumParameter, insuredParameter, sumassuredParameter, policystatusParameter, premiummodeParameter, premiumduedateParameter, beneficiaryParameter, ownerParameter, policytermParameter);
        }
    
        public virtual int USP_DeleteParticipants(Nullable<int> participantno)
        {
            var participantnoParameter = participantno.HasValue ?
                new ObjectParameter("participantno", participantno) :
                new ObjectParameter("participantno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeleteParticipants", participantnoParameter);
        }
    
        public virtual int USP_DeletePolicies(Nullable<int> policynumber)
        {
            var policynumberParameter = policynumber.HasValue ?
                new ObjectParameter("policynumber", policynumber) :
                new ObjectParameter("policynumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_DeletePolicies", policynumberParameter);
        }
    
        public virtual int USP_UpdateParticipants(Nullable<int> participantno, string firstname, string lastname, string middlename, Nullable<System.DateTime> dob, Nullable<int> participanttypeno)
        {
            var participantnoParameter = participantno.HasValue ?
                new ObjectParameter("participantno", participantno) :
                new ObjectParameter("participantno", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("middlename", middlename) :
                new ObjectParameter("middlename", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var participanttypenoParameter = participanttypeno.HasValue ?
                new ObjectParameter("participanttypeno", participanttypeno) :
                new ObjectParameter("participanttypeno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdateParticipants", participantnoParameter, firstnameParameter, lastnameParameter, middlenameParameter, dobParameter, participanttypenoParameter);
        }
    
        public virtual int USP_UpdatePolicies(Nullable<int> plannumber, Nullable<int> installmentpremium, Nullable<int> insured, Nullable<int> sumassured, string policystatus, string premiummode, Nullable<System.DateTime> premiumduedate, Nullable<int> beneficiary, Nullable<int> owner, Nullable<int> policyterm)
        {
            var plannumberParameter = plannumber.HasValue ?
                new ObjectParameter("plannumber", plannumber) :
                new ObjectParameter("plannumber", typeof(int));
    
            var installmentpremiumParameter = installmentpremium.HasValue ?
                new ObjectParameter("installmentpremium", installmentpremium) :
                new ObjectParameter("installmentpremium", typeof(int));
    
            var insuredParameter = insured.HasValue ?
                new ObjectParameter("insured", insured) :
                new ObjectParameter("insured", typeof(int));
    
            var sumassuredParameter = sumassured.HasValue ?
                new ObjectParameter("sumassured", sumassured) :
                new ObjectParameter("sumassured", typeof(int));
    
            var policystatusParameter = policystatus != null ?
                new ObjectParameter("policystatus", policystatus) :
                new ObjectParameter("policystatus", typeof(string));
    
            var premiummodeParameter = premiummode != null ?
                new ObjectParameter("premiummode", premiummode) :
                new ObjectParameter("premiummode", typeof(string));
    
            var premiumduedateParameter = premiumduedate.HasValue ?
                new ObjectParameter("premiumduedate", premiumduedate) :
                new ObjectParameter("premiumduedate", typeof(System.DateTime));
    
            var beneficiaryParameter = beneficiary.HasValue ?
                new ObjectParameter("beneficiary", beneficiary) :
                new ObjectParameter("beneficiary", typeof(int));
    
            var ownerParameter = owner.HasValue ?
                new ObjectParameter("owner", owner) :
                new ObjectParameter("owner", typeof(int));
    
            var policytermParameter = policyterm.HasValue ?
                new ObjectParameter("policyterm", policyterm) :
                new ObjectParameter("policyterm", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_UpdatePolicies", plannumberParameter, installmentpremiumParameter, insuredParameter, sumassuredParameter, policystatusParameter, premiummodeParameter, premiumduedateParameter, beneficiaryParameter, ownerParameter, policytermParameter);
        }
    
        public virtual ObjectResult<USP_ShowParticipants_Result> USP_ShowParticipants()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ShowParticipants_Result>("USP_ShowParticipants");
        }
    
        public virtual ObjectResult<USP_ShowPolicies_Result> USP_ShowPolicies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ShowPolicies_Result>("USP_ShowPolicies");
        }
    }
}
